#!/usr/bin/env ruby

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# Script to generate a report based on Appsignal data over the last two weeks.
#
# The script will pull metrics for the last two weeks.
# Based on these metrics it will calculate changes in response time, error rate
# and throughput, comparing one week to the other.
#
# Pull up the help message to learn about the usage of this script:
#
#         ./bin/appsignal_report_weekly --help
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

require 'appsignal_report'
require 'optparse'

options = { slack_webhook: nil, app_id: nil, app_name: nil }
parser = OptionParser.new do |parser|
  parser.banner =
    'Usage: APPSIGNAL_API_TOKEN=XXX ./bin/appsignal_report_weekly [options]'
  parser.separator ''
  parser.separator 'Specific options:'
  parser.on('-i ID',
            '--app-id ID',
            String,
            'Specify Appsignal App Id') do |id|
    options[:app_id] = id
  end
  parser.on('-n NAME',
            '--app-name NAME',
            String,
            'Specify a name for the Appsignal App') do |name|
    options[:app_name] = name
  end
  parser.on('-s WEBHOOK_URL',
            '--slack WEBHOOK_URL',
            String,
            'Post the report to a Slack Webhook') do |url|
    options[:slack_webhook] = url
  end
  parser.separator ''
  parser.separator 'Common options:'
  parser.on_tail('-h', '--help', 'Show this message') do
    puts parser
    exit
  end
end
parser.parse!

report = AppsignalReport::WeeklyReport.new(
  api_token: ENV['APPSIGNAL_API_TOKEN'],
  app_id: options[:app_id],
  app_name: options[:app_name]
)

report.generate

unless options[:slack_webhook].nil?
  message = AppsignalReport::SlackMessage.new(
    report: report,
    webhook_url: options[:slack_webhook]
  )
  puts message.post
else
  puts report.report.to_json
end
